{"version":3,"sources":["components/Button.js","views/AppView.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","buttonClass","onClick","isIcon","Fragment","textValue","Parser","require","AppView","state","fullText","resultText","isResultClicked","isResultInvalid","undoClick","console","log","digitClick","digit","setState","toString","parseFloat","operationClick","operationSign","length","dotClick","functionalButtonClick","key","newFullText","slice","substring","localStorage","setItem","getItem","getMemoryValue","totalResult","memValue2","totalResult2","fullTextNew","finalResult","parseCalculate","error","Math","sqrt","equalClick","getLastCharacter","character","isNaN","evaluate","checkKeyboardEvent","event","parseInt","printResultTextCSS","css","totalLength","document","addEventListener","this","removeEventListener","href","target","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.80d1529d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Button (props) {\r\n    return ( \r\n        <button className={props.buttonClass} onClick={props.onClick}>\r\n            { props.isIcon ? <React.Fragment><i className={props.isIcon}></i></React.Fragment> : props.textValue }\r\n        </button>\r\n     );\r\n}\r\n \r\nexport default Button;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.min.css'\r\nimport '../assets/styles/App.css';\r\nimport Button from '../components/Button';\r\n\r\nvar Parser = require('expr-eval').Parser;\r\n\r\nclass AppView extends React.Component {\r\n\r\nstate = {\r\n    fullText: '0',\r\n    resultText: '',\r\n    isResultClicked : false,\r\n    isResultInvalid: false\r\n}\r\n\r\nundoClick = () => {\r\n    console.log('undo something');\r\n}\r\n\r\ndigitClick = (digit) => {\r\n    \r\n    if(this.state.isResultClicked){\r\n        this.setState({ fullText : digit.toString(), resultText : '', isResultClicked: false});\r\n    }else{\r\n        let { fullText } = this.state;\r\n\r\n        // If fullText is 0, then clear it\r\n        if(fullText === \"0.\"){\r\n            // fullText = \"\";\r\n        }else if(parseFloat(fullText) === 0){\r\n            fullText = \"\";\r\n        }\r\n    \r\n        fullText = fullText + digit.toString();\r\n        this.setState({ fullText });\r\n    }\r\n}\r\n\r\noperationClick = (operationSign) =>{\r\n    let { fullText, resultText } = this.state;\r\n    console.log('resultText', resultText)\r\n    if(resultText.length > 0){\r\n        this.setState({ \r\n            fullText : resultText+operationSign, \r\n            isResultClicked: false \r\n        });\r\n        this.setState({ \r\n            resultText : '',\r\n        });\r\n    }else{\r\n        fullText = fullText + operationSign;\r\n        this.setState({ fullText });\r\n    }\r\n}\r\n\r\ndotClick = () => {\r\n    if(this.state.isResultClicked){\r\n        this.setState({ fullText : \"0.\", resultText : '', isResultClicked: false});\r\n    }else{\r\n        let { fullText } = this.state;\r\n        fullText = fullText + \".\";\r\n        this.setState({ fullText });\r\n    }\r\n}\r\n\r\n\r\nfunctionalButtonClick = (key) => {\r\n    let { fullText, resultText } = this.state;\r\n\r\n    switch (key) {\r\n        case \"AC\":\r\n            this.setState({ fullText : \"0\", resultText : \"\" });\r\n            break;\r\n\r\n        case \"C\":\r\n            this.setState({ resultText : \"\" });\r\n            // Delete one by one character from fullText\r\n\r\n            if(fullText.length > 0 ){\r\n                let newFullText = fullText.slice(0, -1);\r\n                if(newFullText == \"\"){\r\n                    newFullText = \"0\";\r\n                }\r\n                this.setState({ fullText : newFullText });\r\n            }\r\n            \r\n            break;\r\n\r\n        case \"CUT_FIRST\":\r\n            this.setState({ resultText : \"\" });\r\n\r\n            // Delete one by one character from fullText\r\n            if(fullText.length > 0 ){\r\n                let newFullText = fullText.substring(1);\r\n                if(newFullText == \"\"){\r\n                    newFullText = \"0\";\r\n                }\r\n                this.setState({ fullText : newFullText });\r\n            }\r\n            \r\n            break;\r\n        \r\n        case \"MC\":\r\n            // Clear Memory\r\n            localStorage.setItem('CALC_M', \"0\");\r\n            break;\r\n\r\n        case \"MR\":\r\n            // MR = Memory Recall uses the number in memory, acts as if you had keyed in that number yourself\r\n            let memValue = localStorage.getItem('CALC_M') || \"0\";\r\n            let newFullText = memValue;\r\n            this.setState({ fullText : newFullText, resultText: '' });\r\n            break;\r\n\r\n\r\n        case \"M+\":\r\n            // Memory Add takes the number on the display, adds it to the memory, and puts the result into memory\r\n            let getMemoryValue = parseFloat(localStorage.getItem('CALC_M') || \"0\");\r\n            let totalResult = parseFloat(resultText.length > 0 ? resultText : \"0\") + getMemoryValue;\r\n            localStorage.setItem('CALC_M', totalResult.toString());\r\n            break;\r\n\r\n        case \"M-\":\r\n            // Memory Minus takes the number on the display, minus it to the memory, and puts the result into memory\r\n            let memValue2 = parseFloat(localStorage.getItem('CALC_M') || \"0\");\r\n            let totalResult2 = parseFloat(resultText.length > 0 ? resultText : \"0\") - memValue2;\r\n            localStorage.setItem('CALC_M', totalResult2.toString());\r\n            break;\r\n\r\n        case \"1/x\":\r\n            // Get Values in FullText and 1/parse(FullText)\r\n            try {\r\n                let fullTextNew = \"(1/(\"+fullText+\"))\";\r\n                let finalResult = this.parseCalculate(fullTextNew);\r\n                this.setState({ fullText: fullTextNew, resultText : finalResult.toString() });\r\n            } catch (error) {\r\n                this.setState({ fullText: \"\", resultText : \"\" });\r\n            }\r\n            break;\r\n\r\n        case \"x^2\":\r\n            try {\r\n                let fullTextNew = \"(\"+fullText+\")^2\";\r\n                let finalResult = this.parseCalculate(fullTextNew);\r\n                this.setState({ fullText: fullTextNew, resultText : finalResult.toString() });\r\n            } catch (error) {\r\n                this.setState({ fullText: \"\", resultText : \"\" });\r\n            }\r\n            break;\r\n\r\n        case \"+-\":\r\n            try {\r\n                let fullTextNew = \"-(\"+fullText+\")\";\r\n                // let finalResult = this.parseCalculate(fullTextNew);\r\n                this.setState({ fullText: fullTextNew, resultText : \"\" });\r\n            } catch (error) {\r\n                this.setState({ fullText: \"\", resultText : \"\" });\r\n            }\r\n            break;\r\n\r\n        case \"SQ_ROOT\":\r\n            try {\r\n                let finalResult = this.parseCalculate(fullText);\r\n                finalResult = Math.sqrt(finalResult);\r\n                let fullTextNew = \"√(\"+fullText+\")\";\r\n                this.setState({ fullText: fullTextNew, resultText : finalResult.toString(), isResultInvalid : false });\r\n            } catch (error) {\r\n                this.setState({ fullText: \"\", resultText : \"invalid\", isResultInvalid : true });\r\n            }\r\n            break;\r\n    \r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nequalClick = () => {\r\n    try {\r\n        let finalResult = this.parseCalculate(this.state.fullText);\r\n        this.setState({ resultText: finalResult.toString(), isResultClicked : true, isResultInvalid : false });\r\n    } catch (error) {\r\n        console.log('error', error)\r\n        let resultText = \"invalid\";\r\n        this.setState({ resultText, isResultClicked : true, isResultInvalid : true });\r\n    }\r\n    \r\n}\r\n\r\ngetLastCharacter = (character) => {\r\n    if(isNaN(character)){\r\n        return this.getLastCharacter(character);\r\n    }else{\r\n       \r\n    }\r\n}\r\n\r\n\r\nparseCalculate = (fullText) => {\r\n    let finalResult = 0;\r\n    finalResult = Parser.evaluate(fullText);\r\n    return finalResult;\r\n}\r\n\r\ncheckKeyboardEvent = (event) => {\r\n    if(event.key === \"0\" || event.key === \"1\" || event.key === \"2\" || event.key === \"3\" || event.key === \"4\" || event.key === \"5\" || event.key === \"6\" || event.key === \"7\" || event.key === \"8\" || event.key === \"9\") {\r\n        this.digitClick(parseInt(event.key));\r\n    }else if(event.key === \"+\" || event.key === \"-\" || event.key === \"*\" || event.key === \"/\") {\r\n        return this.operationClick(event.key)\r\n    }else if(event.key === \"=\"){\r\n        this.equalClick();\r\n    }else if(event.key === \"Backspace\"){\r\n        this.functionalButtonClick(\"C\");\r\n    }else if(event.key === \"Enter\"){\r\n        this.equalClick();\r\n    }\r\n    console.log('event', event);\r\n}\r\n\r\n// Handle Key board event\r\ncomponentDidMount(){\r\n    document.addEventListener(\"keydown\", this.checkKeyboardEvent, false);\r\n    localStorage.setItem('CALC_M', localStorage.getItem('CALC_M') || \"0\");\r\n}\r\ncomponentWillUnmount(){\r\n    document.removeEventListener(\"keydown\", this.checkKeyboardEvent, false);\r\n}\r\n\r\n\r\n   \r\nprintResultTextCSS = () => {\r\n    let css = \"resultArea \";\r\n    let { fullText, resultText } = this.state;\r\n    let totalLength = fullText.length + resultText.length;\r\n    if(totalLength >= 0 && totalLength <= 18){\r\n        css = css + \"resultArea-md\";\r\n    }else if(totalLength > 18 && totalLength <= 35){\r\n        css = css + \"resultArea-sm\";\r\n    }else if(totalLength > 35 && totalLength <= 55){\r\n        css = css + \"resultArea-xsm\";\r\n    }else{\r\n        css = css + \"resultArea-xxsm\";\r\n    }\r\n    return css;\r\n}\r\n\r\n  render() { \r\n    const { fullText, resultText, isResultInvalid } = this.state;\r\n    return ( \r\n        <div className=\"App\">\r\n            <div className=\"row justify-content-center\">\r\n              <div className=\"col-md-5\">\r\n\r\n                <div className=\"app-header\">\r\n                    <span className=\"app-title\">AJ</span> Calculator \r\n                    <span className=\"badge badge-warning\">React <small>js</small></span>\r\n                </div>\r\n\r\n                <div className=\"calculatorArea\">\r\n                  <div className=\"row\">\r\n                    \r\n                    <div className=\"col-md-12 calculator-header-part\">\r\n                      <div className={this.printResultTextCSS()}>\r\n                        { fullText }\r\n\r\n                        { isResultInvalid && resultText.length > 0 &&\r\n                            <span className=\"text-danger\">\r\n                                { ' = ' + resultText }\r\n                            </span>\r\n                        }\r\n\r\n                        { !isResultInvalid && resultText.length > 0 &&\r\n                            <span className=\"text-success\">\r\n                                { ' = '+ resultText }\r\n                            </span>\r\n                        }\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12 calculator-body-part\">\r\n                      <div className=\"row justify-content-center\">\r\n                          <Button isIcon={'fa fa-undo'} buttonClass=\"btn btn-primary top-button\" onClick={this.undoClick}/>\r\n                          <Button buttonClass=\"btn btn-primary top-button\" isIcon={'fa fa-arrow-left'}  onClick={() => this.functionalButtonClick(\"CUT_FIRST\")} />\r\n                          <Button buttonClass=\"btn btn-primary top-button  text-bold\" onClick={() => this.functionalButtonClick(\"C\")} textValue=\"C\"/>\r\n                          <Button buttonClass=\"btn btn-primary top-button  text-bold\" onClick={() => this.functionalButtonClick(\"AC\")} textValue=\"AC\"/>\r\n\r\n                      </div>\r\n\r\n                      <div className=\"row justify-content-center mt-2\">\r\n                          <Button buttonClass=\"btn btn-success btn-mem text-bold\" onClick={() => this.functionalButtonClick('MC')} textValue=\"mc\"/>\r\n                          <Button buttonClass=\"btn btn-success btn-mem text-bold\" onClick={() => this.functionalButtonClick('M+')} textValue=\"m+\"/>\r\n                          <Button buttonClass=\"btn btn-success btn-mem text-bold\" onClick={() => this.functionalButtonClick('M-')} textValue=\"m-\"/>\r\n                          <Button buttonClass=\"btn btn-success btn-mem text-bold\" onClick={() => this.functionalButtonClick('MR')} textValue=\"mr\"/>\r\n                      </div>\r\n\r\n                      \r\n                      <div className=\"row justify-content-center mt-2\">\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(7)} textValue=\"7\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(8)} textValue=\"8\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(9)} textValue=\"9\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" onClick={() => this.operationClick('/')} textValue=\"÷\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" textValue=\"√\"  onClick={() => this.functionalButtonClick(\"SQ_ROOT\")} />\r\n                      </div>\r\n\r\n                      <div className=\"row justify-content-center mt-2\">\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(4)} textValue=\"4\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(5)} textValue=\"5\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(6)} textValue=\"6\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" onClick={() => this.operationClick('*')} textValue=\"×\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" onClick={() => this.functionalButtonClick('x^2')} textValue=\"x^2\"/>\r\n                      </div>\r\n\r\n                      <div className=\"row justify-content-center mt-2\">\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(1)} textValue=\"1\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(2)} textValue=\"2\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(3)} textValue=\"3\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" onClick={() => this.operationClick('-')} textValue=\"-\"/>\r\n                          <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" onClick={() => this.functionalButtonClick('1/x')} textValue=\"1/x\"/>\r\n                      </div>\r\n\r\n                      <div className=\"row justify-content-center mt-2\">\r\n                        <Button buttonClass=\"btn btn-primary btn-digit-operation btn-digit text-bold\" onClick={() => this.digitClick(0)} textValue=\"0\"/>\r\n                        <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" onClick={() => this.dotClick()} textValue=\".\"/>\r\n                        <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" onClick={() => this.functionalButtonClick('+-')} textValue=\"±\"/>\r\n                        <Button buttonClass=\"btn btn-primary btn-digit-operation btn-operation text-bold\" onClick={() => this.operationClick('+')} textValue=\"+\"/>\r\n                        <Button buttonClass=\"btn btn-primary btn-digit-operation btn-equal text-bold\" onClick={() => this.equalClick()} textValue=\"=\"/>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n                \r\n                <p className=\"copy-right text-right\">\r\n                    &copy; 2020, <a href=\"https://github.com/ManiruzzamanAkash\" target=\"_blank\">Maniruzzaman Akash </a>\r\n                </p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default AppView;\r\n","import React from 'react';\nimport AppView from './views/AppView';\n \nfunction App () {\n  return ( \n    <React.Fragment>\n      <AppView />\n    </React.Fragment>\n );\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}